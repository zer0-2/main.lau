-- Turtle Mining Program
-- This program will mine a cubic area with specified dimensions.

-- Function to find the chest and orient the turtle
function findChestAndOrient()
    local directions = {
        { "forward", turtle.forward, turtle.detect, turtle.suck },
        { "backward", turtle.back, function() turtle.turnLeft(); turtle.turnLeft(); return turtle.detect(); end, function() turtle.turnLeft(); turtle.turnLeft(); return turtle.suck(); end },
        { "up", turtle.up, turtle.detectUp, turtle.suckUp },
        { "down", turtle.down, turtle.detectDown, turtle.suckDown },
        { "left", function() turtle.turnLeft(); return turtle.forward(); end, function() return turtle.detect(); end, function() return turtle.suck(); end, turtle.turnRight },
        { "right", function() turtle.turnRight(); return turtle.forward(); end, function() return turtle.detect(); end, function() return turtle.suck(); end, turtle.turnLeft }
    }

    for i, dir in ipairs(directions) do
        if dir[1] == "left" or dir[1] == "right" then
            dir[2]()
        else
            dir[2]()
        end

        if dir[3]() then
            if dir[4]() then
                print("Chest found. Starting mining from the opposite direction.")
                if dir[1] == "forward" or dir[1] == "backward" or dir[1] == "up" or dir[1] == "down" then
                    dir[2]()  -- move back if direction was forward, backward, up, or down
                else
                    dir[5]()  -- turn back if direction was left or right
                    turtle.back()
                end
                return
            end
        end

        if dir[1] == "forward" or dir[1] == "backward" or dir[1] == "up" or dir[1] == "down" then
            dir[2]()  -- move back if direction was forward, backward, up, or down
        else
            dir[5]()  -- turn back if direction was left or right
            turtle.back()
        end
    end

    error("No chest found nearby. Please place a chest with fuel and restart the program.")
end

-- Function to refuel the turtle from the chest
function refuelFromChest()
    turtle.select(1)
    if turtle.suck(64) or turtle.suckUp(64) or turtle.suckDown(64) then
        turtle.refuel()
    else
        print("Unable to refuel from the chest.")
    end
end

-- Function to check fuel level and refuel if necessary
function checkFuel()
    if turtle.getFuelLevel() < 100 then
        refuelFromChest()
    end
end

-- Function to check if the turtle's inventory is full
function isInventoryFull()
    for i = 1, 16 do
        if turtle.getItemCount(i) == 0 then
            return false
        end
    end
    return true
end

-- Function to empty the turtle's inventory into the chest
function emptyInventory()
    for i = 2, 16 do  -- Slot 1 is reserved for fuel
        turtle.select(i)
        if not (turtle.drop() or turtle.dropUp() or turtle.dropDown()) then
            print("Unable to drop items into the chest.")
        end
    end
    turtle.select(1) -- Select the fuel slot again
end

-- Function to return to the starting position and deposit items
function returnToStartAndDeposit(currentDepth, currentWidth, currentHeight)
    for i = 1, currentHeight do
        turtle.up()
    end
    for i = 1, currentWidth do
        turtle.back()
    end
    for i = 1, currentDepth do
        turtle.back()
    end
    emptyInventory()
end

-- Function to resume mining from the last position
function resumeMining(currentDepth, currentWidth, currentHeight)
    for i = 1, currentDepth do
        turtle.forward()
    end
    for i = 1, currentWidth do
        turtle.forward()
    end
    for i = 1, currentHeight do
        turtle.down()
    end
end

-- Function to mine forward and handle obstacles
function mineForward()
    while turtle.detect() do
        turtle.dig()
    end
    turtle.forward()
end

-- Function to mine the specified cubic area
function mineCubicArea(depth, width, startY)
    local currentDepth, currentWidth, currentHeight = 0, 0, 0
    local endY = startY - depth

    for h = startY, endY + 1, -1 do
        for w = 1, width do
            for d = 1, width - 1 do
                checkFuel()
                if isInventoryFull() then
                    returnToStartAndDeposit(currentDepth, currentWidth, currentHeight)
                    resumeMining(currentDepth, currentWidth, currentHeight)
                end
                mineForward()
                currentDepth = currentDepth + 1
            end
            if w < width then
                if h % 2 == 0 then
                    turtle.turnRight()
                    mineForward()
                    turtle.turnRight()
                else
                    turtle.turnLeft()
                    mineForward()
                    turtle.turnLeft()
                end
                currentDepth = 0
                currentWidth = currentWidth + 1
            end
        end
        if h > endY + 1 then
            if width % 2 == 1 then
                turtle.turnLeft()
            else
                turtle.turnRight()
            end
            for i = 1, width - 1 do
                turtle.back()
            end
            if width % 2 == 1 then
                turtle.turnRight()
            else
                turtle.turnLeft()
            end
            turtle.digDown()
            turtle.down()
            currentWidth = 0
            currentHeight = currentHeight + 1
        end
    end
end

-- Main program
print("Enter the current Y-coordinate (starting Y-coordinate) of the turtle:")
local startY = tonumber(read())

print("Enter the depth to mine to (world Y-coordinate):")
local targetY = tonumber(read())

print("Enter the width of the area to mine:")
local width = tonumber(read())

print("Starting mining operation...")

-- Find the chest and orient the turtle
findChestAndOrient()

-- Refuel the turtle initially
refuelFromChest()

-- Start mining the area
mineCubicArea(targetY, width, startY)

-- Return to the starting position and deposit items
returnToStartAndDeposit(width - 1, width - 1, startY - targetY)

print("Mining operation complete.")
